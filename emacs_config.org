#+TITLE: Emacs Configuration
#+AUTHOR: David Pritchard
#+PROPERTY: header-args :tangle yes :tangle init.el

#+LaTeX_HEADER: \usepackage[margin=1in]{geometry}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}

#+BEGIN_LaTeX
% background color for code environments
\definecolor{lightyellow}{RGB}{255,255,224}
\definecolor{lightbrown}{RGB}{249,234,197}

% create a listings environment for elisp
\lstset{%
  language=Lisp,
  backgroundcolor=\color{lightyellow},
  basicstyle=\fontsize{10}{11}\fontfamily{pcr}\selectfont,
  keywordstyle=\color{Firebrick3},
  stringstyle=\color{Green4},
  showstringspaces=false,
  commentstyle=\color{Purple3}
  % frame=lines
}
#+END_LaTeX


* Configuration

TODO

** Basic Configuration

*** Set up the package management system

There are several Emacs package archives that can be used to download and update
packages from.  Emacs comes bundled with a package manager called =package.el=,
which does the job of connecting to these archives and handling package
downloads, managing dependencies, and so on.  Most notably, it includes the
functions =package-list-packages= and =package-install=.  See
http://wikemacs.org/wiki/Package.el for more details regarding =package.el=, and
see https://emacs.stackexchange.com/q/268/ for a description of the various
package archives.

The following code was taken from
http://cachestocaches.com/2015/8/getting-started-use-package/.  Some open
questions about this code remain:
  * What does =package-initialize= do?  Autoload?
  * What does the line =(setq package-enable-at-startup nil)= do?
  * How does =require= know where to find =package=?
  * Why do we need the call to =eval-when-compile=?

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC




** Redefine customization storage approach

Eamcs by default appends configuration information to your startup file.  For
example, if you use the "Easy customization interface" (through =M-x customize=
or by some other means), then your customizations are made permanent across
Emacs instances by using this approach.  There are other ways that
customizations can show up as well: for example =package.el= uses it to store a
list of user-installed packages.

However, there is something disagreeable about mixing user-written code and
automatically generated code.  Furthermore, since the startup file is tangled
from this Org file, we have no choice but to separate the automatically
generated code to prevent it from being overwritten every time we tangle a new
file.  This is what is done in the following code block.

#+BEGIN_SRC emacs-lisp
;; direct Emacs to reflect future changes by updating the custom file
(setq custom-file "~/.emacs.d/custom.el")
;; load the existing file
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC




** Emacs config

#+BEGIN_SRC emacs-lisp
;; list of values that are considered safe for local variables.  See
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html
(add-to-list 'safe-local-variable-values '(before-save-hook))
(add-to-list 'safe-local-variable-values '(prog-mode-hook . #'ws-butler-mode))

;; ;; Added by Package.el.  This must come before configurations of
;; ;; installed packages.  Don't delete this line.  If you don't want it,
;; ;; just comment it out by adding a semicolon to the start of the line.
;; ;; You may delete these explanatory comments.
;; (package-initialize)

;; ;; enable Emacs Lisp Package Archive
;; (require 'package)
;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;; display column number
(setq column-number-mode t)

;; set default fill column number
(setq-default fill-column 80)

;; inserting text deletes selected text
(delete-selection-mode t)

;; delete trailing whitespace when saving files
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; see https://github.com/lewang/ws-butler
(use-package ws-butler
  :ensure t)

;; disable graphical toolbar at the top of the screen
(tool-bar-mode -1)

;; disable the scroll bar
(scroll-bar-mode -1)

;; allow more entries in the kill ring.  The default is 60.
(setq kill-ring-max 1000)

;; send backups to `~/.emacs.d/backups` rather than saving in the same directory
;; as the file being backed up
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; save history between Emacs instances.  From
;; http://www.wisdomandwonder.com/wp-content/uploads/2014/03/C3F.html
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

;; cc mode tab size 4 spaces
(setq-default c-basic-offset 4)

;; so that compiler directives are properly indented
(c-set-offset (quote cpp-macro) 0 nil)

;; change comments to `//` instead of `/* ... */`
(add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                        comment-end   "")))

;; show matching parentheses
(show-paren-mode 1)

;; default to truncate lines
(set-default 'truncate-lines t)

;; type "y" or "n" instead of "yes" or "no"
(fset 'yes-or-no-p 'y-or-n-p)

;; remove `C-;` keybinding for `flyspell-auto-correct-previous-word` since we
;; use it for global keybinding to avy TODO
(eval-after-load "flyspell"
  '(define-key flyspell-mode-map (kbd "C-;") nil))
#+END_SRC


** Keybindings

#+BEGIN_SRC emacs-lisp
;; add / change keybindings.  See https://github.com/abo-abo/ace-window for
;; details regarding ace-window
(global-set-key (kbd "M-o") 'ace-window)
;; (global-set-key (kbd "C-;") 'other-window)
;; (global-set-key (kbd "C-M-;") 'previous-multiframe-window)
(global-set-key (kbd "C-9") 'previous-buffer)
(global-set-key (kbd "C-0") 'next-buffer)
(global-set-key (kbd "M-[") 'scroll-down-line)
(global-set-key (kbd "M-]") 'scroll-up-line)
(global-set-key (kbd "C-.") 'xref-find-definitions-other-window)
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
;; crux shortcuts.  See https://github.com/bbatsov/crux
(global-set-key (kbd "C-c I") #'crux-find-user-init-file)
(global-set-key [remap kill-whole-line] #'crux-kill-whole-line)  ; places point at the correct indentation after deletion
(global-set-key (kbd "C-S-k") #'crux-kill-line-backwards)
(global-set-key [(shift return)] #'crux-smart-open-line)           ; doesn't change any test on current line before starting a new line below and moving point
(global-set-key (kbd "C-S-<return>") #'crux-smart-open-line-above) ; doesn't change any test on current line before starting a new line above and moving point
(global-set-key (kbd "C-c d") #'crux-duplicate-current-line-or-region)
(global-set-key (kbd "C-c M-d") #'crux-duplicate-and-comment-current-line-or-region)

;; change info mode keybindings.  By default `n` and `p` go to the next and
;; previous node which always causes me problems.  This changes them to scroll
;; between links.
(progn
  (define-key Info-mode-map (kbd "n") 'Info-next-reference)
  (define-key Info-mode-map (kbd "p") 'Info-prev-reference))
#+END_SRC




** Appearance

*** Font size

#+BEGIN_SRC emacs-lisp
;; set default font size. Specifies font height in units of 1/10 pt
(set-face-attribute 'default nil :height 110)
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
;; specify custom themes directory
(setq custom-theme-directory "~/.emacs.d/themes/")
;; (load-theme 'blippblopp t)

;; specify theme.  See https://stackoverflow.com/a/26555466/5518304 for color
;; mods.
(load-theme 'zenburn t)
(set-face-attribute 'region nil :background "#666" :foreground "#ffffff")
#+END_SRC


*** Modeline

#+BEGIN_SRC emacs-lisp
;; modeline config.  See https://github.com/tarsius/minions and
;; https://github.com/tarsius/moody
(use-package minions
  :config
  (minions-mode 1))
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
;; set the height of the mode line in pixels.  Default is 30.
(customize-set-value 'moody-mode-line-height 14)
#+END_SRC




* Auto-complete and textual substitution

#+BEGIN_SRC emacs-lisp
;; enable company mode in all buffers.  See http://company-mode.github.io
(add-hook 'after-init-hook 'global-company-mode)

;; enable yasnippet mode in all buffers.  See
;; https://github.com/joaotavora/yasnippet
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC


This doesn't work at all for me?

#+BEGIN_SRC emacs-lisp
;; see https://www.reddit.com/r/emacs/comments/8rxm7h/tip_how_to_better_manage_your_spelling_mistakes/
(use-package abbrev
  :defer 1
  :ensure nil
  :custom
  (abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
  (abbrev-mode 1)
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))

(use-package flyspell
  :defer 1
  :custom
  (flyspell-abbrev-p t)
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil)
  (flyspell-mode 1))

(use-package flyspell-correct-ivy
  :after flyspell
  :bind (:map flyspell-mode-map
	      ("C-;" . flyspell-correct-word-generic))
  :custom (flyspell-correct-interface 'flyspell-correct-ivy))

(defhydra hydra-spelling (:color blue)
  "
  ^
  ^Spelling^          ^Errors^            ^Checker^
  ^--------^----------^------^------------^-------^-------
  _q_ quit            _<_ previous        _c_ correction
  ^^                  _>_ next            _d_ dictionary
  ^^                  _f_ check           _m_ mode
  ^^                  ^^                  ^^
  "
  ("q" nil)
  ("<" flyspell-correct-previous :color pink)
  (">" flyspell-correct-next :color pink)
  ("c" ispell)
  ("d" ispell-change-dictionary)
  ("f" flyspell-buffer)
  ("m" flyspell-mode))
#+END_SRC




* Files and buffers

** Dired settings

#+BEGIN_SRC emacs-lisp
;; enables some additional features for dired, such as omitting uninteresting
;; files (bound to C-x M-o).  See
;; https://www.gnu.org/software/emacs/manual/html_mono/dired-x.html
(require 'dired-x)

;; dired settings
(setq-default
 dired-auto-revert-buffer t
 dired-dwim-target t
 dired-listing-switches "-alh --group-directories-first")
#+END_SRC


** Ibuffer settings

#+BEGIN_SRC emacs-lisp
;; use Ibuffer for Buffer List
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; groups Ibuffer entries.  See https://www.emacswiki.org/emacs/IbufferMode for
;; more details.
(setq ibuffer-saved-filter-groups
      (quote (("default"
	       ("R" (mode . ess-r-mode))
	       ("Python" (mode . python-mode))
	       ("C/C++" (or (mode . c-mode)
			    (mode . c++-mode)))
	       ("LaTeX" (or (mode . latex-mode)
			    (mode . bibtex-mode)))
	       ("shell" (mode . sh-mode))
	       ("Lisp" (or (mode . lisp-mode)
			   (mode . scheme-mode)))
	       ("emacs" (or (mode . lisp-interaction-mode)
			    (mode . emacs-lisp-mode)))
	       ("dired" (mode . dired-mode))
	       ("processes" (or (mode . inferior-ess-r-mode)
				(mode . inferior-ess-mode)
				(mode . inferior-python-mode)
				(mode . term-mode)
				(mode . shell-mode)
				(mode . slime-repl-mode)
				(mode . geiser-repl-mode)))
	       ("Org" (mode . org-mode))))))

;; change the width of the first column.  See
;; https://emacs.stackexchange.com/a/623/15552
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 40 40 :left :elide) ; change: the two 40 values were originally 18's
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " " filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))

;; what does this line do?
(add-hook 'ibuffer-mode-hook
	  (lambda () (ibuffer-switch-to-saved-filter-groups "default")))

;; conflicts with ace-window binding
(define-key ibuffer-mode-map (kbd "M-o") nil)
#+END_SRC


** Directory tree modes

*** treemacs

#+BEGIN_SRC emacs-lisp
;; see https://github.com/Alexander-Miller/treemacs
(require 'treemacs)
(treemacs-resize-icons 15)
(global-set-key (kbd "C-c t") 'treemacs)
(global-set-key (kbd "C-c C-t") 'treemacs-select-window)
#+END_SRC




* Moving the cursor

** avy

#+BEGIN_SRC emacs-lisp
;; see https://github.com/abo-abo/avy.  Also see
;; https://cestlaz.github.io/posts/using-emacs-7-avy/ for the `use-package`
;; version of these commands.
(global-set-key (kbd "C-;") 'avy-goto-char)
(global-set-key (kbd "C-'") 'avy-goto-char-2)
(global-set-key (kbd "M-g M-g") 'avy-goto-line)
#+END_SRC


** ace-window

#+BEGIN_SRC emacs-lisp
;; ace-window keys used for switching.  Default is 0-9.  See
;; https://github.com/abo-abo/ace-window for details regarding ace-window
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-background nil)
#+END_SRC




* Editing text

** Parenthsis

#+BEGIN_SRC emacs-lisp
;; `paredit` setup.  See http://wikemacs.org/wiki/Paredit-mode for details
(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)
;; Stop SLIME's REPL from grabbing DEL,
;; which is annoying when backspacing over a '('
(defun override-slime-repl-bindings-with-paredit ()
  (define-key slime-repl-mode-map
    (read-kbd-macro paredit-backward-delete-key)
    nil))
(add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
;; see
;; https://www.reddit.com/r/emacs/comments/55rwnp/how_does_lispy_paredit_work_for_nonlisp/
;; for the following suggestion:
;;
;;     Don't use paredit in non-lisp languages. It is far too strict and you
;;     will be fighting against it most of the time. I use
;;     smartparens-strict-mode with sp-use-paredit-bindings for non-lisp and
;;     paredit for lisp.
#+END_SRC

** Undo

*** Add undo tree

#+BEGIN_SRC emacs-lisp
;; see `M-x describe-package RET undo-tree RET` for more details
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC


** Yanking text

#+BEGIN_SRC emacs-lisp
;; bind M-y to `browse-kill-ring`.  See
;; https://github.com/browse-kill-ring/browse-kill-ring.
(browse-kill-ring-default-keybindings)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; create function which cycles forwards through the kill ring
(defun yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))
;; bind key to previously defined function
(global-set-key (kbd "M-Y") 'yank-pop-forwards)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Properly indent yanked code (not yet tested!).  From:
;;
;;    https://www.emacswiki.org/emacs/AutoIndentation#toc3
;;
;; see https://emacs.wordpress.com/2007/01/22/killing-yanking-and-copying-lines/
;; for a copying function for possible later addition
(dolist (command '(yank yank-pop))
  (eval `(defadvice ,command (after indent-region activate)
	   (and (not current-prefix-arg)
		(member major-mode '(emacs-lisp-mode lisp-mode
						     ess-mode        python-mode
						     c-mode          c++-mode
						     latex-mode      plain-tex-mode))
		(let ((mark-even-if-inactive transient-mark-mode))
		  (indent-region (region-beginning) (region-end) nil))))))

;; search for non-ascii characters in the buffer.  Useful when copying text from
;; PDFs or other places that can introduce non-ascii character.  See
;; https://www.emacswiki.org/emacs/FindingNonAsciiCharacters
(defun occur-non-ascii ()
  "Find any non-ascii characters in the current buffer."
  (interactive)
  (occur "[^[:ascii:]]"))
#+END_SRC




** Multiple cursors

#+BEGIN_SRC emacs-lisp
;; https://github.com/magnars/multiple-cursors.el
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
#+END_SRC


** iedit

#+BEGIN_SRC emacs-lisp
;; see https://github.com/victorhge/iedit
(use-package iedit
  :bind
  (("C-;" . nil)
   ("C-M-i" . iedit-mode)))
;; (global-set-key (kbd "C-M-i") 'iedit-mode)
#+END_SRC


** easy kill

#+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :ensure t
  :config
  (global-set-key [remap kill-ring-save] #'easy-kill)
  (global-set-key [remap mark-sexp] #'easy-mark))
#+END_SRC




* Org mode

** Org mode stuff

#+BEGIN_SRC emacs-lisp
;; save clock history across Emacs sessions.  See
;; https://orgmode.org/manual/Clocking-work-time.html
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
;; add languages to babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)))
;; no need for confirmation before evaluating code blocks
(setq org-confirm-babel-evaluate nil)
;; inserting graphical output
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)

;; see docstring for `org-latex-listings`
(setq org-latex-listings t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{hyphens}{url}")

;; fontify code in code blocks
(setq org-src-fontify-natively t)
#+END_SRC




* Ivy + counsel + swiper

#+BEGIN_SRC emacs-lisp
;; copied from https://github.com/abo-abo/swiper
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC




* projectile

#+BEGIN_SRC emacs-lisp
;; see https://github.com/bbatsov/projectile and
;; https://projectile.readthedocs.io/en/latest/installation/
(use-package projectile
  :ensure t
  :config
  ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
(setq projectile-switch-project-action #'projectile-dired)
(setq projectile-completion-system 'ivy)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; enable counsel projectile mode
(counsel-projectile-mode)
#+END_SRC




* Help files

#+BEGIN_SRC emacs-lisp
;; see https://github.com/justbur/emacs-which-key.  A useful command is
;; `which-key-show-major-mode` (similar to `C-h m`)
(use-package which-key
  :ensure t)
(which-key-mode)
(which-key-setup-side-window-bottom)

;; from https://github.com/Wilfred/helpful/
(global-set-key (kbd "C-h f") #'helpful-callable)
(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)
;; Lookup the current symbol at point. C-c C-d is a common keybinding
;; for this in lisp modes.
(global-set-key (kbd "C-c C-d") #'helpful-at-point)
;; Look up *F*unctions (excludes macros).  By default, C-h F is bound to
;; `Info-goto-emacs-command-node`. Helpful already links to the manual, if a
;; function is referenced there.
(global-set-key (kbd "C-h F") #'helpful-function)
;; Look up *C*ommands.  By default, C-h C is bound to describe
;; `describe-coding-system`. I don't find this very useful, but it's frequently
;; useful to only look at interactive functions.
(global-set-key (kbd "C-h C") #'helpful-command)
#+END_SRC




* Major modes

** magit

#+BEGIN_SRC emacs-lisp
;; magit settings
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(setq git-commit-summary-max-length 50)
#+END_SRC


** Emasc Speaks Statistics (ESS)

#+BEGIN_SRC emacs-lisp
;; load Emacs Speaks Statistics
(require 'ess-site)
;; (setq ess-smart-S-assign-key ";")

;; ESS hook additions.  Note that the duplicate calls to (ess-toggle-S-assign
;; nil) are correct: the first call clears the default `ess-smart-S-assign'
;; assignment and the second line re-assigns it to the customized setting.
(add-hook 'ess-mode-hook
	  (lambda ()
	    (ess-set-style 'C++ 'quiet)        ; recommended in R Internals man
	    (setq ess-fancy-comments nil)      ; disable ESS-style indentation
	    (setq ess-smart-S-assign-key ";")  ; reassign ' <- ' to ';'
	    (define-key ess-mode-map (kbd ";") 'ess-insert-assign)
	    ;; (ess-toggle-S-assign nil)          ; removed due to https://stackoverflow.com/q/50954945
	    ;; (ess-toggle-S-assign nil)          ; see above comment
	    (setq-local comment-add 0)         ; so that comments are # not ##
	    (setq ess-roxy-str "#'")           ; Roxygen comments are #' not ##'
	    ;; (local-set-key (kbd "C-'") 'ess-switch-to-ESS)
	    (local-set-key (kbd "C-S-m") (lambda () (interactive) (insert " %>% ")))
	    (setq inferior-R-args "--no-restore --no-save ")
	    ;; (add-hook 'local-write-file-hooks
	    ;; 	      (lambda ()
	    ;; 		(ess-nuke-trailing-whitespace)))
	    (setq ess-swv-processor 'knitr)                 ; weaver
	    (setq ess-swv-pdflatex-commands '("pdflatex"))  ; LaTeX compiler
	    (setq ess-nuke-trailing-whitespace-p t)         ; strip trailing whitespace w/o query
	    (setq ess-sas-local-unix-keys t)                ; SAS keys, see section 13.5
	    ))

;; note: use `R-initialize-on-start` when the documentation isn't working.  See
;; https://github.com/emacs-ess/ESS/issues/117

;; use polymode for markdown and R
(use-package poly-markdown
  :ensure t)
(use-package poly-R
  :ensure t)
#+END_SRC


** Comint

#+BEGIN_SRC emacs-lisp
;; customize comint (command interpreter) settings, as described in the ESS
;; manual, section 4.3
(eval-after-load "comint"
   '(progn
      (define-key comint-mode-map [up]
        'comint-previous-matching-input-from-input)
      (define-key comint-mode-map [down]
        'comint-next-matching-input-from-input)
      ;; also recommended for ESS use --
      (setq comint-scroll-to-bottom-on-output 'others)
      (setq comint-scroll-show-maximum-output t)
      ;; somewhat extreme, almost disabling writing in *R*, *shell* buffers above prompt:
      (setq comint-scroll-to-bottom-on-input 'this)
      ))

;; allow color to work in shell.  See www.emacswiki.org/emacs/AnsiColor
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
#+END_SRC


** LaTeX

#+BEGIN_SRC emacs-lisp
;; ignore text for syntax highlighting in Verbatim and lstlisting environments
;; http://tex.stackexchange.com/q/111289
;;
;; Note: I would like to put this in the LaTeX-mode hook, but it doesn't work there.  Why??
(setq LaTeX-verbatim-environments-local '("Verbatim" "lstlisting" "lstinline"))
(setq LaTeX-verbatim-macros-with-delims-local '("code"))
;; synctex minor mode additions.  See https://tex.stackexchange.com/a/49840/88779
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)  ; enable synctex minor mode
(setq TeX-source-correlate-start-server t)              ; automatically start server without asking
(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
;; AUCTeX hook additions
(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    ;; Enable document parsing (first two commands, see Section 1.3 in docs)
	    (setq TeX-auto-save t)
	    (setq TeX-parse-self t)
	    ;; indent after newline
	    (setq TeX-newline-function 'newline-and-indent)
	    ;; Make AUCTex aware of multi-file document structure
	    (setq-default TeX-master nil)
	    ;; ;; unset local keybinding.  Note that this isn't the proper way to
	    ;; ;; do this, see the comment in
	    ;; ;; https://stackoverflow.com/a/7598754/5518304
	    ;; (define-key (LaTeX-mode-map "C-;" nil))
	    ))

;; ;; below doesn't work right, what can be done?
;; (setq LaTeX-fill-excluded-macros '("lstinline" "index"))


;; ;; allows synctex and preview mode to work properly together.  See
;; ;; https://tex.stackexchange.com/a/94325/88779.
;; (defadvice TeX-view (around always-view-master-file activate)
;;   (let ((TeX-current-process-region-p nil))
;;     ad-do-it))
#+END_SRC


** pdf-tools

#+BEGIN_SRC emacs-lisp
;; taken from http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/
(use-package pdf-tools
  :pin manual ;; manually update
  :config
  ;; initialise
  (pdf-tools-install)
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; use normal isearch
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  ;; keyboard shortcuts
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
  (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))

;; see the "Known problems" section at https://github.com/politza/pdf-tools for
;; the reason why this line is included
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC



** slime

#+BEGIN_SRC emacs-lisp
;; slime settings
(setq inferior-lisp-program "/usr/bin/sbcl")
;; also setup the slime-fancy contributed package
(add-to-list 'slime-contribs 'slime-fancy)
;; use quicklisp's version of slime
(load (expand-file-name "~/quicklisp/slime-helper.el"))
#+END_SRC



** guile

#+BEGIN_SRC emacs-lisp
;; guile settings.  Inform guile that the only Scheme implementation currently
;; installed is mit-scheme so that it doesn't try to guess the wrong Scheme for
;; buffers.  See http://www.nongnu.org/geiser/geiser_3.html#choosing_002dimpl
(setq geiser-active-implementations '(mit))
#+END_SRC



** Python

#+BEGIN_SRC emacs-lisp
;; Python settings
(elpy-enable)
(setq elpy-rpc-python-command "/usr/bin/python3")
(setq python-shell-interpreter (expand-file-name "~/.local/bin/ipython")
      python-shell-interpreter-args "-i --simple-prompt")

;; ;; enable autopep8 formatting on save
;; (require 'py-autopep8)
;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC


** SQL

#+BEGIN_SRC emacs-lisp
;; for the MariaDB prompt to show up in the inferior process for SQL mode.  See
;; https://unix.stackexchange.com/a/297320/154101
(require 'sql)
(sql-set-product-feature 'mysql :prompt-regexp "^\\(MariaDB\\|MySQL\\) \\[[_a-zA-Z()]*\\]> ")
;; set defaults for mySQL login
(setq sql-mysql-login-params
      '((user :default "dpritch")
        (server :default "localhost")))
;; Capitalize keywords in SQL mode
(add-hook 'sql-mode-hook 'sqlup-mode)
;; Capitalize keywords in an interactive session (e.g. psql)
(add-hook 'sql-interactive-mode-hook 'sqlup-mode)
;; Set a global keyword to use sqlup on a region
(global-set-key (kbd "C-c u") 'sqlup-capitalize-keywords-in-region)
#+END_SRC


** YAML

#+BEGIN_SRC emacs-lisp
;; prepend directories to load path
(add-to-list 'load-path "~/.emacs.d/other-packages/yaml")


;; add yaml-mode.  See https://github.com/yoshiki/yaml-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook
	  '(lambda ()
	     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC
